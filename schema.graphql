########################
#### Badge Entities ####
########################

"""
Ethereum accounts this subgraph is tracking in order to award badges
"""
type BadgeUser @entity {
  "Ethereum address"
  id: ID!
  "BadgeWinner null if no badges won"
  badgeWinner: BadgeWinner @derivedFrom(field: "badgeUser")
  "Progress user has made along predefined metrics"
  progress: [Progress!]! @derivedFrom(field: "badgeUser")
}

"""
BadgeUsers that have earned at least one badge
"""
type BadgeWinner @entity {
  "ETH address of the BadgeWinner"
  id: ID!
  "Associated BadgeUser"
  badgeUser: BadgeUser!
  "Number of badge awards won"
  earnedBadgeCount: Int!
  "Number of badge awards minted"
  mintedAwardCount: Int!
  "Voting power accumulated from all badges"
  votingPower: BigInt!
  "Badges awarded to address"
  earnedBadges: [EarnedBadge!]! @derivedFrom(field: "badgeWinner")
}

"""
EarnedBadges are awarded to BadgeWinners for satisfying BadgeDefinition thresholds
"""
type EarnedBadge @entity {
  "{badgeName}-{BadgeWinner}"
  id: ID!
  "Address of the BadgeWinner"
  badgeWinner: BadgeWinner!
  "Block number in which badge was awarded"
  blockAwarded: BigInt!
  "Timestamp in which badge was awarded"
  timestampAwarded: BigInt!
  "Hash of the transaction that triggered this award"
  transactionHash: String!
  "Additional details about the badge"
  definition: BadgeDefinition!
  "Ordered number in which the badge was awarded for the associated definition"
  awardNumber: Int!
  # "Data specific to this earnedBadge of a given BadgeDefinition"
  # metadata: [EarnedBadgeMetadata!]! @derivedFrom(field: "earnedBadge")
  "Stores reference to global badge number"
  earnedBadgeCount: EarnedBadgeCount! @derivedFrom(field: "earnedBadge")
}

"""
Orders EarnedBadges for future merkle proof verification
"""
type EarnedBadgeCount @entity {
  "incrementing number"
  id: ID!
  "Ordered number in which the badge was awarded across all badges"
  globalBadgeNumber: Int!
  "Associated earnedBadge"
  earnedBadge: EarnedBadge!
}

type BadgeMetric @entity {
  id: ID!
  metricNumber: Int!
  metricName: String!
}

"""
BadgeDefinitions are created by the BadgeDefinitionManager smart contract.
Subgraphs may also have genesis BadgeDefinitions that are baked in for retroactive 
drops.
"""
type BadgeDefinition @entity {
  "Name of badge"
  id: ID!
  "Description of badge"
  description: String!
  "Name of metric being tracked"
  metric: BadgeMetric!
  "Value that metric must reach in order for a badge to be awarded"
  threshold: BigInt!
  "Voting power acrued when badge is awarded"
  votingPower: BigInt!
  "Total count of earned badges"
  earnedBadgeCount: Int!
  "IPFS URI containing metadata about this BadgeDefinition"
  ipfsURI: String!
  "Incrementing number for efficient on-chain representation"
  badgeDefinitionNumber: Int!
  "Badges awarded with this definition"
  earnedBadges: [EarnedBadge!]! @derivedFrom(field: "definition")
}


################################
#### Internal Badge Entities ###
################################


"""
Singleton entity that tracks numbers and stats relating to Emblem
"""
type EmblemEntityStats @entity {
  "ID is set to 1"
  id: ID!
  "Number of badges earned"
  earnedBadgeCount: Int!
  "Number of unique BadgeWinners"
  badgeWinnerCount: Int!
  "Number of unique BadgeDefinitions created (including Genesis badges)"
  badgeDefinitionCount: Int!
  "Number of BadgeMetric entities"
  badgeMetricCount: Int!
}

"""
Saves progress along a metric for an account
"""
type Progress @entity {
  "{Account address}-{BadgeMetric}"
  id: ID!
  "Account who has made this progress"
  badgeUser: BadgeUser!
  "BadgeMetric being tracked"
  metric: BadgeMetric!
  "Current value of metric. Negative progress is not supported. value can only go up"
  value: BigInt!
}


"""
BadgeMetric -> BadgeDefinitions tracking that metric
"""
type MetricConsumer @entity {
  "BadgeMetric"
  id: ID!
  "BadgeDefinitions using this metric"
  badgeDefinitions: [BadgeDefinition!]!
}


################################
###### Balancer v1+v2 ##########
################################


type BalancerUser @entity {
  "Address of Ethereum account"
  id: ID!
}

type BalancerUserPoolJoin @entity {
  "{BalancerUser address}-{poolId}"
  id: ID!
  "BalancerUser address"
  user: BalancerUser!
  "Pool id the user interacted with (using string to cover v1 and v2)"
  pool: BalancerPool!
}

type BalancerUserPoolSwap @entity {
  "{BalancerUser address}-{poolId}"
  id: ID!
  "BalancerUser address"
  user: BalancerUser!
  "Pool the user interacted with (using string to cover v1 and v2)"
  pool: BalancerPool!
}

type BalancerPool @entity {
  "Balancer Pool address"
  id: ID!
  "Balancer version (currently 1 or 2)"
  version: Int!
  "Swaps made in this pool"
  swaps: [BalancerUserPoolSwap!]! @derivedFrom(field: "pool")
  "Accounts that have provided liquidity to this pool"
  joiners: [BalancerUserPoolJoin!]! @derivedFrom(field: "pool")
}

type Swap @entity {
  "hash of {BalancerUser}-{Token1}-{Token2}"
  id: ID!
  "Token spent by user (erc20 address)"
  tokenIn: Bytes!
  "Token given to user (erc20 address)"
  tokenOut: Bytes!
}

type ERC20Token @entity {
  "Token Address"
  id: ID!
}
